-- This file is used to initialize the tables for the project Tire


-----------------------------------Part 1 : User&Role-------------------------------------

-- roles of users
DROP TABLE IF EXISTS u_roles;
CREATE TABLE u_roles (
    id CHAR(4) PRIMARY KEY,
    -- role id, xxxx 
    -- xxxx = ROOT : super admin,  ADMN : administrator, MANR : store's manager , STAF : store's staff, CUST : customer
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is hour
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- users
DROP TABLE IF EXISTS u_users;
CREATE TABLE u_users (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    user_name VARCHAR(100) NOT NULL,
    -- user name 
    role_id CHAR(4),
    -- role id
    phone_number VARCHAR(20) UNIQUE,
    -- phone number (can be used to login)
    email VARCHAR(100) UNIQUE,
    -- email (can be used to login)
    photo_url VARCHAR(200),
    -- photo url
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- login authentication of users
-- login session will be stored in the client (cookie or local storage)
DROP TABLE IF EXISTS u_auths;
CREATE TABLE u_auths (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    login_name VARCHAR(100) UNIQUE,
    -- login name (can be used to login)
    auth_pass VARCHAR(512),
    -- md5 string of readable password
    session_ttl INTEGER,
    -- how long user can live after logining in, unit is hour
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- login sessions by JWT
DROP TABLE IF EXISTS u_login_sessions;
CREATE TABLE u_login_sessions (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    -- this field would be written into JWT token, which are used to control the validation of tickets
    user_id CHAR(21),
    -- the user who have logined in 
    user_agent VARCHAR(256),
    -- User-Agent from the brower, which would be used to anylyse customers
    exp_at TIMESTAMP NOT NULL,
    -- time of expiration (using the time of server)
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);


-----------------------------------Part 2 : Product&Inventory-------------------------------------

-- stores (because the platform contains many workshops)
DROP TABLE IF EXISTS stores;
CREATE TABLE stores (
    id CHAR(10) PRIMARY KEY,
    -- id, format : zzssccdddd
    -- zz : zip code of the nation , ref : https://en.wikipedia.org/wiki/List_of_postal_codes, such as Canada is 'CA'
    -- ss : code of the states/provinces in the nation, decided by us
    -- cc : code of the cities in the states/provinces, decided by us
    -- dddd : the sequence number of the store 
    store_name VARCHAR(50),
    -- store name
    introduction VARCHAR(200) DEFAULT '',
    -- introduction
    owner CHAR(21),
    -- user id of the store's owner
    address VARCHAR(200) DEFAULT '',
    -- address, including street, zip code and geographical coordinates etc
    phone_number VARCHAR(20) DEFAULT '',
    -- phone number
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- categories of all products
DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
    id CHAR(3) PRIMARY KEY,
    -- id, format : xdd
    -- x rules :  1 : tire&wheel | 2 : accessories
    title VARCHAR(50),
    -- title
    introduction VARCHAR(200) DEFAULT '',
    -- introduction
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- brands of products (including tires)
DROP TABLE IF EXISTS brands;
CREATE TABLE brands (
    id CHAR(4) PRIMARY KEY,
    -- id, format : xddd
    -- xx rules :  1 : Premium | 2 : Mid-range | 3,4,5 : Economy | 6,7,8,9 : Budget
    brand VARCHAR(50) NOT NULL,
    -- name of maker, such as Michelin
    grade CHAR(1) DEFAULT '1',
    -- 1: Premium, 2: Mid-range, 3: Economy, 6: Budget
    owner VARCHAR(100) DEFAULT '',
    -- the company that owns the brand
    introduction VARCHAR(200) DEFAULT '',
    -- introduction of the brand
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- providers of products
DROP TABLE IF EXISTS providers;
CREATE TABLE providers (
    id CHAR(4) PRIMARY KEY,
    -- id, format : xddd, range = [1000,9999]
    -- x : 1 : manufactuer,  2 : First-class dealer,  3,4 : Second-class dealer, 5,6,7,8,9: Third-class dealer
    title VARCHAR(50) NOT NULL,
    -- title
    introduction VARCHAR(200) DEFAULT '',
    -- introduction
    class CHAR(1) DEFAULT '1',
    -- provider's class 
    -- 1 : manufactuer,  2 : First-class dealer,  3,4 : Second-class dealer, 5,6,7,8,9: Third-class dealer
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- SPU defines of products
DROP TABLE IF EXISTS products;
CREATE TABLE products (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    spu_name VARCHAR(100),
    -- spu name
    description VARCHAR(200) DEFAULT '',
    -- introduction
    category_id CHAR(3),
    -- category id
    brand_id CHAR(4),
    -- brand id
    provider_id CHAR(4),
    -- provider id
    model VARCHAR(50),
    -- model name
    product_code VARCHAR(100),
    -- ccc-bbbb-pppp-model
    -- ccc : category id, bbbb : brand id, pppp : provider id, model : model name (only includes [a-zA-Z0-9_])
    status CHAR(1) DEFAULT '0',
    -- 0 : not available , 1 : available
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- attributes of SPU
-- using horizontal fields table to improve the performance of searching
DROP TABLE IF EXISTS product_attrs;
CREATE TABLE product_attrs (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_id CHAR(21),
    -- product id (foreign key)
    attr_01 VARCHAR(30),
    attr_02 VARCHAR(30),
    attr_03 VARCHAR(30),
    attr_04 VARCHAR(30),
    attr_05 VARCHAR(30),
    attr_06 VARCHAR(30),
    attr_07 VARCHAR(30),
    attr_08 VARCHAR(30),
    attr_09 VARCHAR(30),
    attr_10 VARCHAR(30),
    attr_11 VARCHAR(30),
    attr_12 VARCHAR(30),
    attr_13 VARCHAR(30),
    attr_14 VARCHAR(30),
    attr_15 VARCHAR(30),
    attr_16 VARCHAR(30),
    attr_17 VARCHAR(30),
    attr_18 VARCHAR(30),
    attr_19 VARCHAR(30),
    attr_20 VARCHAR(30),
    -- attr fields, 01-20th's max length is 30
    attr_21 VARCHAR(100),
    attr_22 VARCHAR(100),
    attr_23 VARCHAR(100),
    attr_24 VARCHAR(100),
    attr_25 VARCHAR(100),
    attr_26 VARCHAR(100),
    attr_27 VARCHAR(100),
    attr_28 VARCHAR(100),
    attr_29 VARCHAR(100),
    attr_30 VARCHAR(100),
    -- attr fields, 21-30th's max length is 100
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- SKU defines of products
-- ref : https://en.wikipedia.org/wiki/Stock_keeping_unit)
DROP TABLE IF EXISTS product_skus;
CREATE TABLE product_skus (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_id CHAR(21),
    -- product id (foreign key)
    store_id CHAR(10),
    -- store id (NOTE : sku data owned by the store)
    title VARCHAR(100),
    -- title
    subtitle VARCHAR(100),
    -- subtitle
    description VARCHAR(200) DEFAULT '',
    -- description
    price NUMERIC(8, 2),
    -- price
    stock_amount INTEGER,
    -- the amount in the stock
    status CHAR(1) DEFAULT '0',
    -- 0 : not available , 1 : available
    invalid BOOLEAN default FALSE,
    -- invalid = true, means data is invalid
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- attributes of SKU
-- using horizontal fields table to improve the performance of searching
DROP TABLE IF EXISTS product_sku_attrs;
CREATE TABLE product_sku_attrs (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    attr_01 VARCHAR(30),
    attr_02 VARCHAR(30),
    attr_03 VARCHAR(30),
    attr_04 VARCHAR(30),
    attr_05 VARCHAR(30),
    attr_06 VARCHAR(30),
    attr_07 VARCHAR(30),
    attr_08 VARCHAR(30),
    attr_09 VARCHAR(30),
    attr_10 VARCHAR(30),
    -- attr fields, 01-10th's max length is 30
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);

-- the records of loading stock
DROP TABLE IF EXISTS stock_loads;
CREATE TABLE stock_loads (
    id CHAR(21) PRIMARY KEY,
    -- id, generated by nanoid
    product_sku_id CHAR(21),
    -- product sku id (foreign key)
    load_amount INTEGER,
    -- the amount of loading
    operator CHAR(21),
    -- user id of operator
    c_at TIMESTAMP DEFAULT now(),
    u_at TIMESTAMP DEFAULT now()
);


-----------------------------------Part 3 : Order&Shopping Cart-------------------------------------






-----------------------------------Part 4 : Payment-------------------------------------





-----------------------------------Part 5 : Installation&Tracking-------------------------------------





